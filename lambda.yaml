---
AWSTemplateFormatVersion: '2010-09-09'
Description: Main CF template that builds shared resources and other stacks
Parameters:
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket that is created to hold data
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
    Default: jiradestinationbucket
  Email:
    Type: String
    Description: Get your email that you have for Jira
  Server:
    Type: String
    Description: Jira Server link
  APIToken:
    Type: String
    Description: API token from Jira https://docs.searchunify.com/Content/Content-Sources/Atlassian-Jira-Confluence-Authentication-Create-API-Token.htm
Mappings:
  RegionMap:
       eu-west-1:        {CodeBucket: aws-well-architected-labs-ireland }
       us-east-2:        {CodeBucket: aws-well-architected-labs-ohio }
       us-east-1:        {CodeBucket: aws-well-architected-labs-virginia }
       us-west-1:        {CodeBucket: aws-well-architected-labs-california }
       us-west-2:        {CodeBucket: aws-well-architected-labs-oregon }
       ap-southeast-1:   {CodeBucket: aws-well-architected-labs-singapore }
       eu-central-1:     {CodeBucket: aws-well-architected-labs-frankfurt }
       eu-west-2:        {CodeBucket: aws-well-architected-labs-london }
       eu-north-1:       {CodeBucket: aws-well-architected-labs-stockholm }
       ap-southeast-2:   {CodeBucket: aws-well-architected-labs-ap-sydney }
       ap-south-1:       {CodeBucket: aws-well-architected-labs-mumbai }
       ap-northeast-3:   {CodeBucket: aws-well-architected-labs-osaka }
       ap-northeast-2:   {CodeBucket: aws-well-architected-labs-seoul }
       ap-northeast-1:   {CodeBucket: aws-well-architected-labs-tokyo }
       ca-central-1:     {CodeBucket: aws-well-architected-labs-canada }
       eu-west-3:        {CodeBucket: aws-well-architected-labs-paris }
       sa-east-1:        {CodeBucket: aws-well-architected-labs-san-paulo }
Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName:
        !Sub "${DestinationBucket}${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
        - Id: delete-incomplete-mpu-7days
          Prefix: ''
          AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          ExpiredObjectDeleteMarker: True
          Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:            
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
  CloudWatchTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Lambda Data trigger
      Name: LambdaCloudWatchTrigger
      ScheduleExpression: "cron(0 8 1 * ? *)"  
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
            - Lambda
            - Arn
          Id: TriggerForJiraData
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JiraTARole
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: "LambdaTWGPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                Resource: !GetAtt S3Bucket.Arn
              - Effect: "Allow"
                Action:
                  - "support:*"
                Resource: "*"
              
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: jira_ticket_Lambda
      Description: LambdaFunction of python3.10
      Runtime: python3.11
      Code:
        ZipFile: |
          from jira import JIRA
          import boto3
          from botocore.client import Config
          from botocore.exceptions import ClientError
          import logging
          import json
          import os

          role_arn = os.environ['ROLEARN'] 
          account_id= boto3.client('sts').get_caller_identity().get('Account')
          account_id_jira_felid = 'customfield_10070' #os.environ['CUSTOMFELID'] #https://community.atlassian.com/t5/Jira-questions/Jira-Next-Gen-Python-API-Create-Issue-with-Custom-Field/qaq-p/2036396
          guide_jira_felid = 'customfield_10071' #os.environ['CUSTOMFELID']
          ignore_check_list = ['Amazon EC2 Reserved Instance Lease Expiration', 'Amazon EC2 Reserved Instance Optimization', 'Amazon ElastiCache Reserved Node Optimization', 'Amazon OpenSearch Service Reserved Instance Optimization', 'Amazon Redshift Reserved Node Optimization', 'Amazon Relational Database Service (RDS) Reserved Instance Optimization']

          def lambda_handler(event, context):
              read_ta(account_id)

          def jira_connection(): # https://jira.readthedocs.io/api.html#jira.jirashell.handle_basic_auth
              email = os.environ['EMAIL']
              api_token = os.environ['API_TOKEN']
              server = os.environ['SERVER']

              jira_connection = JIRA(
                  basic_auth=(email, api_token),
                  server= server
              )
              return jira_connection

          def jira_ticket(jira_connection, summary, description, account_id, guide):
              issue_dict = {
                  'project': {'key': 'COST'},
                  'summary': str(summary),
                  'description': str(description),
                  'issuetype': {'name': 'Task'},
                  f'{account_id_jira_felid}': account_id, # found code from inspecting the jira, must be a better way
                  f'{guide_jira_felid}': guide
              } 


              new_issue = jira_connection.create_issue(fields=issue_dict)
              return new_issue

          def read_ta(account_id):
              connection = jira_connection()
              support = assume_role(account_id, "support", "us-east-1", role_arn)
              checks = support.describe_trusted_advisor_checks(language="en")["checks"] #https://boto3.amazonaws.com/v1/documentation/api/1.26.93/reference/services/support/client/describe_trusted_advisor_checks.html

              for check in checks:
                  if (check.get("category") != "cost_optimizing"): continue
                  try:
                      result = support.describe_trusted_advisor_check_result(checkId=check["id"], language="en")['result'] #https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/support/client/describe_trusted_advisor_check_result.html
                      check_name = check["name"]
                      if check_name not in ignore_check_list:
                          for resource in result["flaggedResources"]:
                              ta_data = dict(zip(check['metadata'], resource['metadata']))
                              ticket = jira_ticket(connection, check_name, ta_data, account_id, guide_jira_felid )
                              print(f"{ticket}-{check_name}")
                  except Exception as e:
                      print(f'{type(e)}: {e}')



          def assume_role(account_id, service, region, role):
              assumed = boto3.client('sts').assume_role(RoleArn=role, RoleSessionName='--')
              creds = assumed['Credentials']
              return boto3.client(service, region_name=region,
                  aws_access_key_id=creds['AccessKeyId'],
                  aws_secret_access_key=creds['SecretAccessKey'],
                  aws_session_token=creds['SessionToken'],
              )


      Handler: 'index.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role: 
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          BUCKET_NAME:  !Sub "${DestinationBucket}${AWS::AccountId}"
          API_TOKEN: !Ref APIToken
          SERVER: !Ref Server
          EMAIL: !Ref Email
      Architectures:
           - "arm64"
      Layers:
        - !Ref Layer
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Lambda}"
      RetentionInDays: 14

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt CloudWatchTrigger.Arn
  Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.11
      Content:
        S3Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", CodeBucket]
        S3Key: Cost/Labs/jira/jira_layer.zip
      Description: jira layer
      LayerName: jira-layer